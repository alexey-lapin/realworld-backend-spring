/*
 * MIT License
 *
 * Copyright (c) 2020 - present Alexey Lapin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.github.al.realworld.infrastructure.config;

import io.swagger.v3.oas.annotations.enums.SecuritySchemeIn;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import org.springframework.boot.info.BuildProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;

import java.util.List;

//@formatter:off
@SecurityScheme(
        name = "token",
        description = """
                For accessing the protected API resources, you must have received a valid JWT token after registering or
                logging in. This JWT token must then be used for all protected resources by passing it in via the
                'Authorization' header.

                A JWT token is generated by the API by either registering via **/users** or logging in via
                **/users/login**.

                The following format must be in the 'Authorization' header **and the _value_ field below**:

                `Token xxxxxx.yyyyyyy.zzzzzz`

                """,
        type = SecuritySchemeType.APIKEY,
        paramName = HttpHeaders.AUTHORIZATION,
        in = SecuritySchemeIn.HEADER
)
@SecurityScheme(
        name = "bearer",
        description = """
                For accessing the protected API resources, you must have received a valid JWT token after registering or
                logging in. This JWT token must then be used for all protected resources by passing it in via the
                'Authorization' header.

                A JWT token is generated by the API by either registering via /users or logging in via /users/login.

                The following format must be in the 'Authorization' header:

                `Bearer xxxxxx.yyyyyyy.zzzzzz`

                The following format must be in **the _value_ field below**:

                `xxxxxx.yyyyyyy.zzzzzz`
                """,
        type = SecuritySchemeType.HTTP,
        bearerFormat = "JWT",
        scheme = "bearer"
)
//@formatter:on
@Configuration(proxyBeanMethods = false)
public class OpenApiConfig {

    @Bean
    public OpenAPI openAPI(BuildProperties buildProperties) {
        return new OpenAPI()
                .info(new Info()
                        .title(buildProperties.getArtifact())
                        .version(buildProperties.getVersion())
                        .description("Real world backend API built in Spring")
                        .license(new License()
                                .name("MIT")
                                .url("https://github.com/alexey-lapin/realworld-backend-spring/blob/master/LICENSE")
                        )
                        .contact(new Contact()
                                .name("Alexey Lapin")
                                .email("alexey-lapin@protonmail.com")
                                .url("https://github.com/alexey-lapin")
                        )

                )
                .security(List.of(new SecurityRequirement().addList("token").addList("bearer")));
    }

}
